openapi: 3.0.3
info:
  title: Loyalist api
  version: 1.0.0
  description: Loyalty card management and sharing platform
paths:
  /api/auth/:
    post:
      operationId: auth_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAuthResponse'
          description: ''
  /api/auth/password/update/:
    post:
      operationId: auth_password_update_create
      description: An endpoint for password updating
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/profile/:
    get:
      operationId: auth_profile_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_profile_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_profile_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      description: |-
        Register new user in the system

        You need to provide `email`, `first_name`, `last_name`, `password`
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAuthResponse'
          description: ''
  /api/auth/register/confirm/:
    post:
      operationId: auth_register_confirm_create
      description: Activate user account
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpConfirmRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTAuthResponse'
          description: ''
  /api/auth/social-logins/:
    get:
      operationId: auth_social_logins_retrieve
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLinks'
          description: ''
  /api/auth/social/jwt-pair/:
    post:
      operationId: auth_social_jwt_pair_create
      description: |-
        View will login or signin (create) the user from social oauth2.0 provider.

        **Input** (default serializer_class_in):

            {
                "provider": "facebook",
                "code": "AQBPBBTjbdnehj51"
            }

        + optional

            "redirect_uri": "/relative/or/absolute/redirect/uri"

        **Output**:

        user data in serializer_class format
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2InputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuth2InputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OAuth2InputRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTPair'
          description: ''
  /api/auth/verify/:
    post:
      operationId: auth_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
        required: true
      responses:
        '200':
          description: No response body
  /api/image-upload/:
    post:
      operationId: image_upload_create
      description: |-
        Upload image to server

        Upload image into S3 bucket, returning its `name` and `url`.
        You need to specify `Content-Type` header to `image/*` value, i. e. `image/jpeg`.
      tags:
      - image-upload
      requestBody:
        content:
          content:
            schema:
              format: binary
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUpload'
          description: ''
  /api/loyalty-cards/:
    get:
      operationId: loyalty_cards_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - loyalty-cards
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBaseLoyaltyCardList'
          description: ''
    post:
      operationId: loyalty_cards_create
      tags:
      - loyalty-cards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCard'
          description: ''
  /api/loyalty-cards/{id}/:
    get:
      operationId: loyalty_cards_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - loyalty-cards
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCard'
          description: ''
    put:
      operationId: loyalty_cards_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - loyalty-cards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoyaltyCardRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCard'
          description: ''
    patch:
      operationId: loyalty_cards_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - loyalty-cards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLoyaltyCardRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLoyaltyCardRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLoyaltyCardRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoyaltyCard'
          description: ''
    delete:
      operationId: loyalty_cards_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - loyalty-cards
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/stores/:
    get:
      operationId: stores_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - stores
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBaseStoreList'
          description: ''
  /api/stores/{id}/:
    get:
      operationId: stores_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Store.
        required: true
      tags:
      - stores
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
          description: ''
components:
  schemas:
    BaseLoyaltyCard:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
      required:
      - id
      - title
    BaseStore:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
      required:
      - id
      - title
    ChangePasswordRequest:
      type: object
      description: Serializer for password change endpoint.
      properties:
        new_password:
          type: string
          minLength: 1
        confirmed_password:
          type: string
          minLength: 1
        old_password:
          type: string
          minLength: 1
      required:
      - confirmed_password
      - new_password
      - old_password
    CustomTokenObtainPairRequest:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - password
    FormatEnum:
      enum:
      - CODE_128
      - CODABAR
      - QR_CODE
      type: string
      description: |-
        * `CODE_128` - CODE 128
        * `CODABAR` - CODABAR
        * `QR_CODE` - QR CODE
    ImageUpload:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - name
      - url
    ImageUploadRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
      required:
      - name
    JWTAuthResponse:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - refresh
    JWTPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    LoyaltyCard:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        code:
          type: string
          maxLength: 255
        balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        format:
          $ref: '#/components/schemas/FormatEnum'
      required:
      - code
      - id
      - title
    LoyaltyCardRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        code:
          type: string
          minLength: 1
          maxLength: 255
        balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        format:
          $ref: '#/components/schemas/FormatEnum'
      required:
      - code
      - title
    OAuth2InputRequest:
      type: object
      properties:
        provider:
          type: string
          minLength: 1
        code:
          type: string
          minLength: 1
        redirect_uri:
          type: string
          minLength: 1
      required:
      - code
    PaginatedBaseLoyaltyCardList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BaseLoyaltyCard'
    PaginatedBaseStoreList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BaseStore'
    PatchedLoyaltyCardRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        code:
          type: string
          minLength: 1
          maxLength: 255
        balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        format:
          $ref: '#/components/schemas/FormatEnum'
    PatchedUserRequest:
      type: object
      description: |-
        Parent serializer for ones that have models with File fields.
        This serializer will return ``None`` if the field is empty.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 255
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        avatar:
          allOf:
          - $ref: '#/components/schemas/ImageUploadRequest'
          nullable: true
        is_notifications_enabled:
          type: boolean
    SignUpConfirmRequest:
      type: object
      properties:
        token:
          type: string
          minLength: 1
      required:
      - token
    SignUpRequest:
      type: object
      description: Create new user when sign up
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 255
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - email
      - first_name
      - last_name
      - password
    SocialLinks:
      type: object
      properties:
        linkedin_openidconnect:
          type: string
          format: uri
        google_oauth2:
          type: string
          format: uri
    Store:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        logo:
          type: string
          format: uri
          nullable: true
        description:
          type: string
      required:
      - id
      - title
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TokenVerifyRequest:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - token
    User:
      type: object
      description: |-
        Parent serializer for ones that have models with File fields.
        This serializer will return ``None`` if the field is empty.
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 255
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        avatar:
          allOf:
          - $ref: '#/components/schemas/ImageUpload'
          nullable: true
        is_notifications_enabled:
          type: boolean
        has_password:
          type: boolean
          readOnly: true
      required:
      - email
      - first_name
      - has_password
      - last_name
    UserRequest:
      type: object
      description: |-
        Parent serializer for ones that have models with File fields.
        This serializer will return ``None`` if the field is empty.
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Email address
          maxLength: 255
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
        avatar:
          allOf:
          - $ref: '#/components/schemas/ImageUploadRequest'
          nullable: true
        is_notifications_enabled:
          type: boolean
      required:
      - email
      - first_name
      - last_name
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
